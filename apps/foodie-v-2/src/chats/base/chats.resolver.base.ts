/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Chats } from "./Chats";
import { ChatsCountArgs } from "./ChatsCountArgs";
import { ChatsFindManyArgs } from "./ChatsFindManyArgs";
import { ChatsFindUniqueArgs } from "./ChatsFindUniqueArgs";
import { CreateChatsArgs } from "./CreateChatsArgs";
import { UpdateChatsArgs } from "./UpdateChatsArgs";
import { DeleteChatsArgs } from "./DeleteChatsArgs";
import { ChatsService } from "../chats.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Chats)
export class ChatsResolverBase {
  constructor(
    protected readonly service: ChatsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Chats",
    action: "read",
    possession: "any",
  })
  async _chatsItemsMeta(
    @graphql.Args() args: ChatsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Chats])
  @nestAccessControl.UseRoles({
    resource: "Chats",
    action: "read",
    possession: "any",
  })
  async chatsItems(@graphql.Args() args: ChatsFindManyArgs): Promise<Chats[]> {
    return this.service.chatsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Chats, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Chats",
    action: "read",
    possession: "own",
  })
  async chats(
    @graphql.Args() args: ChatsFindUniqueArgs
  ): Promise<Chats | null> {
    const result = await this.service.chats(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Chats)
  @nestAccessControl.UseRoles({
    resource: "Chats",
    action: "create",
    possession: "any",
  })
  async createChats(@graphql.Args() args: CreateChatsArgs): Promise<Chats> {
    return await this.service.createChats({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Chats)
  @nestAccessControl.UseRoles({
    resource: "Chats",
    action: "update",
    possession: "any",
  })
  async updateChats(
    @graphql.Args() args: UpdateChatsArgs
  ): Promise<Chats | null> {
    try {
      return await this.service.updateChats({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Chats)
  @nestAccessControl.UseRoles({
    resource: "Chats",
    action: "delete",
    possession: "any",
  })
  async deleteChats(
    @graphql.Args() args: DeleteChatsArgs
  ): Promise<Chats | null> {
    try {
      return await this.service.deleteChats(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

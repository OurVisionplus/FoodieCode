/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Meals as PrismaMeals,
  Comments as PrismaComments,
  Likes as PrismaLikes,
  Payments as PrismaPayments,
  User as PrismaUser,
} from "@prisma/client";

export class MealsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MealsCountArgs, "select">): Promise<number> {
    return this.prisma.meals.count(args);
  }

  async mealsItems(args: Prisma.MealsFindManyArgs): Promise<PrismaMeals[]> {
    return this.prisma.meals.findMany(args);
  }
  async meals(args: Prisma.MealsFindUniqueArgs): Promise<PrismaMeals | null> {
    return this.prisma.meals.findUnique(args);
  }
  async createMeals(args: Prisma.MealsCreateArgs): Promise<PrismaMeals> {
    return this.prisma.meals.create(args);
  }
  async updateMeals(args: Prisma.MealsUpdateArgs): Promise<PrismaMeals> {
    return this.prisma.meals.update(args);
  }
  async deleteMeals(args: Prisma.MealsDeleteArgs): Promise<PrismaMeals> {
    return this.prisma.meals.delete(args);
  }

  async findCommentsItems(
    parentId: string,
    args: Prisma.CommentsFindManyArgs
  ): Promise<PrismaComments[]> {
    return this.prisma.meals
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .commentsItems(args);
  }

  async findLikesItems(
    parentId: string,
    args: Prisma.LikesFindManyArgs
  ): Promise<PrismaLikes[]> {
    return this.prisma.meals
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likesItems(args);
  }

  async findPaymentsItems(
    parentId: string,
    args: Prisma.PaymentsFindManyArgs
  ): Promise<PrismaPayments[]> {
    return this.prisma.meals
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentsItems(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.meals
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

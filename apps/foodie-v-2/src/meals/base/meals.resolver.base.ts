/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Meals } from "./Meals";
import { MealsCountArgs } from "./MealsCountArgs";
import { MealsFindManyArgs } from "./MealsFindManyArgs";
import { MealsFindUniqueArgs } from "./MealsFindUniqueArgs";
import { CreateMealsArgs } from "./CreateMealsArgs";
import { UpdateMealsArgs } from "./UpdateMealsArgs";
import { DeleteMealsArgs } from "./DeleteMealsArgs";
import { CommentsFindManyArgs } from "../../comments/base/CommentsFindManyArgs";
import { Comments } from "../../comments/base/Comments";
import { LikesFindManyArgs } from "../../likes/base/LikesFindManyArgs";
import { Likes } from "../../likes/base/Likes";
import { PaymentsFindManyArgs } from "../../payments/base/PaymentsFindManyArgs";
import { Payments } from "../../payments/base/Payments";
import { User } from "../../user/base/User";
import { MealsService } from "../meals.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Meals)
export class MealsResolverBase {
  constructor(
    protected readonly service: MealsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "read",
    possession: "any",
  })
  async _mealsItemsMeta(
    @graphql.Args() args: MealsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Meals])
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "read",
    possession: "any",
  })
  async mealsItems(@graphql.Args() args: MealsFindManyArgs): Promise<Meals[]> {
    return this.service.mealsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Meals, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "read",
    possession: "own",
  })
  async meals(
    @graphql.Args() args: MealsFindUniqueArgs
  ): Promise<Meals | null> {
    const result = await this.service.meals(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Meals)
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "create",
    possession: "any",
  })
  async createMeals(@graphql.Args() args: CreateMealsArgs): Promise<Meals> {
    return await this.service.createMeals({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Meals)
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async updateMeals(
    @graphql.Args() args: UpdateMealsArgs
  ): Promise<Meals | null> {
    try {
      return await this.service.updateMeals({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Meals)
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "delete",
    possession: "any",
  })
  async deleteMeals(
    @graphql.Args() args: DeleteMealsArgs
  ): Promise<Meals | null> {
    try {
      return await this.service.deleteMeals(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Comments], { name: "commentsItems" })
  @nestAccessControl.UseRoles({
    resource: "Comments",
    action: "read",
    possession: "any",
  })
  async findCommentsItems(
    @graphql.Parent() parent: Meals,
    @graphql.Args() args: CommentsFindManyArgs
  ): Promise<Comments[]> {
    const results = await this.service.findCommentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Likes], { name: "likesItems" })
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async findLikesItems(
    @graphql.Parent() parent: Meals,
    @graphql.Args() args: LikesFindManyArgs
  ): Promise<Likes[]> {
    const results = await this.service.findLikesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payments], { name: "paymentsItems" })
  @nestAccessControl.UseRoles({
    resource: "Payments",
    action: "read",
    possession: "any",
  })
  async findPaymentsItems(
    @graphql.Parent() parent: Meals,
    @graphql.Args() args: PaymentsFindManyArgs
  ): Promise<Payments[]> {
    const results = await this.service.findPaymentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Meals): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

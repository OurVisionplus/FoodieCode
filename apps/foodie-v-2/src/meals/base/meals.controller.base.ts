/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MealsService } from "../meals.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MealsCreateInput } from "./MealsCreateInput";
import { Meals } from "./Meals";
import { MealsFindManyArgs } from "./MealsFindManyArgs";
import { MealsWhereUniqueInput } from "./MealsWhereUniqueInput";
import { MealsUpdateInput } from "./MealsUpdateInput";
import { CommentsFindManyArgs } from "../../comments/base/CommentsFindManyArgs";
import { Comments } from "../../comments/base/Comments";
import { CommentsWhereUniqueInput } from "../../comments/base/CommentsWhereUniqueInput";
import { LikesFindManyArgs } from "../../likes/base/LikesFindManyArgs";
import { Likes } from "../../likes/base/Likes";
import { LikesWhereUniqueInput } from "../../likes/base/LikesWhereUniqueInput";
import { PaymentsFindManyArgs } from "../../payments/base/PaymentsFindManyArgs";
import { Payments } from "../../payments/base/Payments";
import { PaymentsWhereUniqueInput } from "../../payments/base/PaymentsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MealsControllerBase {
  constructor(
    protected readonly service: MealsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Meals })
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMeals(@common.Body() data: MealsCreateInput): Promise<Meals> {
    return await this.service.createMeals({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        ingredients: true,
        price: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Meals] })
  @ApiNestedQuery(MealsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mealsItems(@common.Req() request: Request): Promise<Meals[]> {
    const args = plainToClass(MealsFindManyArgs, request.query);
    return this.service.mealsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        ingredients: true,
        price: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Meals })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async meals(
    @common.Param() params: MealsWhereUniqueInput
  ): Promise<Meals | null> {
    const result = await this.service.meals({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        ingredients: true,
        price: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Meals })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMeals(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() data: MealsUpdateInput
  ): Promise<Meals | null> {
    try {
      return await this.service.updateMeals({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          ingredients: true,
          price: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Meals })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMeals(
    @common.Param() params: MealsWhereUniqueInput
  ): Promise<Meals | null> {
    try {
      return await this.service.deleteMeals({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          ingredients: true,
          price: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/commentsItems")
  @ApiNestedQuery(CommentsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Comments",
    action: "read",
    possession: "any",
  })
  async findCommentsItems(
    @common.Req() request: Request,
    @common.Param() params: MealsWhereUniqueInput
  ): Promise<Comments[]> {
    const query = plainToClass(CommentsFindManyArgs, request.query);
    const results = await this.service.findCommentsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        meal: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async connectCommentsItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        connect: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async updateCommentsItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        set: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async disconnectCommentsItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/likesItems")
  @ApiNestedQuery(LikesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async findLikesItems(
    @common.Req() request: Request,
    @common.Param() params: MealsWhereUniqueInput
  ): Promise<Likes[]> {
    const query = plainToClass(LikesFindManyArgs, request.query);
    const results = await this.service.findLikesItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        meal: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/likesItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async connectLikesItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: LikesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likesItems: {
        connect: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/likesItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async updateLikesItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: LikesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likesItems: {
        set: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/likesItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async disconnectLikesItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: LikesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likesItems: {
        disconnect: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentsItems")
  @ApiNestedQuery(PaymentsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payments",
    action: "read",
    possession: "any",
  })
  async findPaymentsItems(
    @common.Req() request: Request,
    @common.Param() params: MealsWhereUniqueInput
  ): Promise<Payments[]> {
    const query = plainToClass(PaymentsFindManyArgs, request.query);
    const results = await this.service.findPaymentsItems(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        meal: {
          select: {
            id: true,
          },
        },

        stripePaymentId: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentsItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async connectPaymentsItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: PaymentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentsItems: {
        connect: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentsItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async updatePaymentsItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: PaymentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentsItems: {
        set: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentsItems")
  @nestAccessControl.UseRoles({
    resource: "Meals",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentsItems(
    @common.Param() params: MealsWhereUniqueInput,
    @common.Body() body: PaymentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateMeals({
      where: params,
      data,
      select: { id: true },
    });
  }
}

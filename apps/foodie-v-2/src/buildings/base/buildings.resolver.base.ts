/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Buildings } from "./Buildings";
import { BuildingsCountArgs } from "./BuildingsCountArgs";
import { BuildingsFindManyArgs } from "./BuildingsFindManyArgs";
import { BuildingsFindUniqueArgs } from "./BuildingsFindUniqueArgs";
import { CreateBuildingsArgs } from "./CreateBuildingsArgs";
import { UpdateBuildingsArgs } from "./UpdateBuildingsArgs";
import { DeleteBuildingsArgs } from "./DeleteBuildingsArgs";
import { UsersFindManyArgs } from "../../users/base/UsersFindManyArgs";
import { Users } from "../../users/base/Users";
import { BuildingsService } from "../buildings.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Buildings)
export class BuildingsResolverBase {
  constructor(
    protected readonly service: BuildingsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "read",
    possession: "any",
  })
  async _buildingsItemsMeta(
    @graphql.Args() args: BuildingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Buildings])
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "read",
    possession: "any",
  })
  async buildingsItems(
    @graphql.Args() args: BuildingsFindManyArgs
  ): Promise<Buildings[]> {
    return this.service.buildingsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Buildings, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "read",
    possession: "own",
  })
  async buildings(
    @graphql.Args() args: BuildingsFindUniqueArgs
  ): Promise<Buildings | null> {
    const result = await this.service.buildings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Buildings)
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "create",
    possession: "any",
  })
  async createBuildings(
    @graphql.Args() args: CreateBuildingsArgs
  ): Promise<Buildings> {
    return await this.service.createBuildings({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Buildings)
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "update",
    possession: "any",
  })
  async updateBuildings(
    @graphql.Args() args: UpdateBuildingsArgs
  ): Promise<Buildings | null> {
    try {
      return await this.service.updateBuildings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Buildings)
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "delete",
    possession: "any",
  })
  async deleteBuildings(
    @graphql.Args() args: DeleteBuildingsArgs
  ): Promise<Buildings | null> {
    try {
      return await this.service.deleteBuildings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Users], { name: "usersItems" })
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "read",
    possession: "any",
  })
  async findUsersItems(
    @graphql.Parent() parent: Buildings,
    @graphql.Args() args: UsersFindManyArgs
  ): Promise<Users[]> {
    const results = await this.service.findUsersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

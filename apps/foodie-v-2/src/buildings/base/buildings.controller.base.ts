/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BuildingsService } from "../buildings.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BuildingsCreateInput } from "./BuildingsCreateInput";
import { Buildings } from "./Buildings";
import { BuildingsFindManyArgs } from "./BuildingsFindManyArgs";
import { BuildingsWhereUniqueInput } from "./BuildingsWhereUniqueInput";
import { BuildingsUpdateInput } from "./BuildingsUpdateInput";
import { UsersFindManyArgs } from "../../users/base/UsersFindManyArgs";
import { Users } from "../../users/base/Users";
import { UsersWhereUniqueInput } from "../../users/base/UsersWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BuildingsControllerBase {
  constructor(
    protected readonly service: BuildingsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Buildings })
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBuildings(
    @common.Body() data: BuildingsCreateInput
  ): Promise<Buildings> {
    return await this.service.createBuildings({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Buildings] })
  @ApiNestedQuery(BuildingsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async buildingsItems(@common.Req() request: Request): Promise<Buildings[]> {
    const args = plainToClass(BuildingsFindManyArgs, request.query);
    return this.service.buildingsItems({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Buildings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async buildings(
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<Buildings | null> {
    const result = await this.service.buildings({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Buildings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBuildings(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() data: BuildingsUpdateInput
  ): Promise<Buildings | null> {
    try {
      return await this.service.updateBuildings({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Buildings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBuildings(
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<Buildings | null> {
    try {
      return await this.service.deleteBuildings({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/usersItems")
  @ApiNestedQuery(UsersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "read",
    possession: "any",
  })
  async findUsersItems(
    @common.Req() request: Request,
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<Users[]> {
    const query = plainToClass(UsersFindManyArgs, request.query);
    const results = await this.service.findUsersItems(params.id, {
      ...query,
      select: {
        avatar: true,

        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/usersItems")
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "update",
    possession: "any",
  })
  async connectUsersItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: UsersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usersItems: {
        connect: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/usersItems")
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "update",
    possession: "any",
  })
  async updateUsersItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: UsersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usersItems: {
        set: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/usersItems")
  @nestAccessControl.UseRoles({
    resource: "Buildings",
    action: "update",
    possession: "any",
  })
  async disconnectUsersItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: UsersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usersItems: {
        disconnect: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }
}

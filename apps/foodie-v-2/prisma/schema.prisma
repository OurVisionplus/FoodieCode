datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  commentsItems Comments[]
  createdAt     DateTime   @default(now())
  email         String?    @unique
  firstName     String?
  id            String     @id @default(cuid())
  lastName      String?
  likesItems    Likes[]
  mealsItems    Meals[]
  password      String
  paymentsItems Payments[]
  roles         Json
  updatedAt     DateTime   @updatedAt
  username      String     @unique
}

model Meals {
  commentsItems Comments[]
  createdAt     DateTime   @default(now())
  description   String?
  id            String     @id @default(cuid())
  ingredients   String?
  likesItems    Likes[]
  paymentsItems Payments[]
  price         Float?
  title         String?
  updatedAt     DateTime   @updatedAt
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
}

model Buildings {
  address    String?
  createdAt  DateTime @default(now())
  id         String   @id @default(cuid())
  name       String?
  updatedAt  DateTime @updatedAt
  usersItems Users[]
}

model Comments {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  meal      Meals?   @relation(fields: [mealId], references: [id])
  mealId    String?
  text      String?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Likes {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  meal      Meals?   @relation(fields: [mealId], references: [id])
  mealId    String?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Payments {
  amount          Float?
  createdAt       DateTime @default(now())
  id              String   @id @default(cuid())
  meal            Meals?   @relation(fields: [mealId], references: [id])
  mealId          String?
  stripePaymentId String?
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

model Chats {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  message   String?
  recipient String?
  sender    String?
  updatedAt DateTime @updatedAt
}

model Users {
  avatar     Json?
  building   Buildings? @relation(fields: [buildingId], references: [id])
  buildingId String?
  createdAt  DateTime   @default(now())
  email      String?
  id         String     @id @default(cuid())
  name       String?
  updatedAt  DateTime   @updatedAt
}
